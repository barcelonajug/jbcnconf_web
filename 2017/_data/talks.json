{
  "items": [
    {
      "type": "talk",
      "title": "The Art of Simplicity",
      "abstract": "We've been told to keep things simple. It turns out, that's easily said than done. Creating something simple is, well, not really that simple. If simple was sitting next to us, would we even recognize it? Is my design simple, is yours simple? How can we tell? That's a simple question, but the answer to it is… well come to this keynote to find out.",
      "tags": [
        "Design",
        "KISS"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC1-SE1",
      "speakers": [
        "venkat"
      ]
    },
    {
      "type": "talk",
      "title": "Functional Programming in Java",
      "abstract": "Java 8 is the most significant change to the language since it's introduction, surpassing changes seen in any of the previous versions. It is not merely syntactical change or addition of a few extra features, it's a paradigm shift. Come to this presentation to learn about the power and capabilities of functional programming using Java 8 and how to benefit from those when building Java applications.",
      "tags": [
        "Functional",
        "Java"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC1-SE1",
      "speakers": [
        "venkat"
      ]
    },
    {
      "type": "talk",
      "title": "The Long Road",
      "abstract": "Choosing the next career step in such a diverse and fast-paced industry is not an easy task. But when it comes to our careers, there is no right or wrong. Or there is? How do we know? In this talk we will be talking about different career choices, how can we choose good companies to work for, what we can learn from interviews and selection processes, when should we look for a new job, and how to change our working environment.",
      "tags": [
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC1-SE7",
      "speakers": [
        "sandro"
      ]
    },
    {
      "type": "talk",
      "title": "Real World Java 9",
      "abstract": "The feature we always hear about whenever Java 9 is in the news is Jigsaw, modularity.  But this doesn't scratch the same developer itch that Java 8's lambdas and streams did, and we're left with a vague sensation that the next version might not be that interesting. Java 9 actually has a lot of great additions and changes to make development a bit nicer.  These features can't be lumped under an umbrella term like Java 8's lambdas and streams, the changes are scattered throughout the APIs and language features that we regularly use. In this presentation Trisha will show, via live coding:<br> - How we can use the new Flow API to utilise Reactive Programming <br> - How the improvements to the Streams API make it easier to control real-time streaming data <br> - How to the Collections convenience methods simplify code<br> Along the way we'll bump into other Java 9 features, including some of the additions to interfaces and changes to deprecation.  We’ll see that once you start using Java 9, you can't go back to Before.",
      "tags": [
        "Java",
        "Java 9",
        "Reactive",
        "Live coding"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC1-SE3",
      "speakers": [
        "trisha"
      ]
    },
    {
      "type": "workshop",
      "title": "Microservices from 0-100",
      "abstract": "During the workshop you will start from scratch a new projects based on Spring cloud. We will guide you thru the process of setting up the technical services that will support you business microservices. We will add continuous delivery and devops with jenkins and docker to the mix as we want to build and run the full scenario. We will complement these with some open source starters and opinionated accelerators to complete this in 2 hours while we explain the decisiones made. You could expect to walk out of the workshop with a running example of a Microservices application and the knowledge to start your new project already warmed up!<br/><br/><span style=\"text-decoration: underline;\">Requirements for the workshop</span>: <a href=\"https://github.com/Appverse/JBCNConf-Microservices_0-100\" style=\"text-decoration: underline; color: blue;\" target=\"_blank\">Follow this link</a>",
      "tags": [ 
        "Java",
        "Spring",
        "Devops",
        "MSA",
        "Docker",
        "Jenkins"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#WED-TC4-SE2",
      "speakers": [
        "marcelo-colomer", "carlos-rubio"
      ]
    },
    {
      "type": "talk",
      "title": "Building microservices with Vert.x",
      "abstract": "Vert.x is a toolkit for building reactive applications on the JVM. It was awarded for 'Most Innovative Java Technology' at the JAX Innovation awards. Vert.x is event driven, non blocking and polyglot, which makes it an excellent platform for building microservices. In this talk, I’ll share experiences and real-world use cases from a Dutch company that started building reactive web applications with Vert.x about 4 years ago. You’ll learn the concepts behind Vert.x, why we chose Vert.x, how we’re using it and the challenges we faced. Topics include the anatomy of our projects, (micro)services architecture, deployment model and DevOps, scalability, the upgrade from Vert.x 2 to Vert.x 3 and cooperation with the team behind Vert.x. At the end of this session, you’ll know enough about Vert.x to get started yourself right away!",
      "tags": [
        "Vertx",
        "Microservices",
        "Reactive"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC1-SE6",
      "speakers": [
        "schrijver"
      ]
    },
    {
      "type": "talk",
      "title": "How To Stay Responsive With 400 Backends",
      "abstract": "In these days of web scale and microservices, gracefully handling faulty or crashing backend web services becomes increasingly important. As long as your application uses just a handful of such backends, there’s no problem. But what if you have hundreds of them? How will you prevent your application from the negative effects of inevitable incidental crashes or timeouts when contacting other web services? In this talk, we’ll take a real-world example from a web scale system. This system is targeted at 10 million users and has around 400 heterogeneous backends. Akka and Scala power a system that is capable of running smoothly even when some backends might not be so stable.",
      "tags": [
        "Microservice",
        "Web scale",
        "Reactive",
        "Akka",
        "Scala"
      ],
      "level": "Advanced",
      "video": "",
      "scheduleId": "#TUE-TC2-SE1",
      "speakers": [
        "mmulders"
      ]
    },
    {
      "type": "talk",
      "title": "Developing cloud-ready Camel microservices",
      "abstract": "As a Java developer it may be daunting to know how to get started how to develop container applications that runs on Kubernetes cluster. Using minikube its very easy to run a local Kubernetes cluster and with the help of fabric8 tooling its even easier to install and run using familiar tools like Maven. In this talk we will build a set of Apache Camel and Java based Microservices that uses Spring Boot and WildFly Swarm. With the help of fabric8 maven tooling you will see how to build, deploy, and run your Java projects on a Kubernetes cluster (local or remote). And even live debugging is easy to do as well. We will discuss practices how to build distributed and fault tolerant microservices using technologies such as Kubernetes Services, Netflix Hystrix, and Camel EIP patterns for fault tolerance. This talk is a 50/50 mix between slides and demo.",
      "tags": [
        "Microservices",
        "Kubernetes",
        "Integration"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#MON-TC3-SE3",
      "speakers": [
        "davsclaus"
      ]
    },
    {
      "type": "talk",
      "title": "Going Reactive with Vert.x",
      "abstract": "Forget the theory, ignore the academics, in the end all that matters for us is CODE! Come to this session and we won't disappoint you! We are simply going to build awesome, next generation apps, with a reactive and asynchronous programming model on RxJava + Vert.x. Bring your smartphone as you will be participating in this fast and furious session. Brace yourselves! Forget Spring. Winter is coming.",
      "tags": [
        "RxJava",
        "Reactive programming",
        "Java 8",
        "Asynchronous",
        "Microservices"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC1-SE5",
      "speakers": [
        "burrsutter"
      ]
    },
    {
      "type": "talk",
      "title": "Why you’re going to FAIL running Java on docker!",
      "abstract": "Running Java on docker is easy, right? Just create a Dockerfile, run a docker build and then you’re ready to go! Thinking this way is the easiest path to complete FAILURE when running docker containers in production.<br/>The JVM knows how to auto-tune itself to achieve the best possible performance in the environment it’s running. So far, the environment has been a single physical or virtual machine. But now you have containers, and it changes everything: you need to know how containers manages their own resources, and you need to apply this knowledge when running and optimizing your JVM running in a container.<br/>Want to get ready to really run Java on docker in production? Then come to this session to learn a lot about JVM and containers and avoid the highway to debugging hell. You’ll get simple tips & tricks that will save you hundreds of hours of debugging & logging to figure out what is wrong with your containers.",
      "tags": [
        "docker",
        "jvm",
        "java",
        "containers",
        "kubernetes",
        "openshift"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC1-SE2",
      "speakers": [
        "burrsutter"
      ]
    },
    {
      "type": "talk",
      "title": "Testing For Unicorns",
      "abstract": "One of the most important benefits of automated testing is to ensure a fast and safe code refactoring to evolve our system architecture.  The main problem is how to write tests that are easy to write, easy to follow and not time consuming during development nor execution time. In this session, we are going to explore some powerful Java testing libraries that will help you write better (unit) tests focusing on the main Unicorns architecture challenges such as validating microservices endpoints, remote calls to other microservices or just asynchronous/reactive code.",
      "tags": [
        "Testing"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#TUE-TC4-SE1",
      "speakers": [
        "alexsoto"
      ]
    },
    {
      "type": "talk",
      "title": "Reactive Stream Processing with MicroProfile and Apache Kafka",
      "abstract": "The community driven Microprofile initiative aims to optimize Enterprise Java for a microservices architecture, by leveraging a few Java EE APIs, such as JAX-RS, CDI and JSONP. With this minimal, but very powerful set of technologies, the profile is a perfect base for modern Java EE applications in combinations new technologies, such as integration with Apache Kafka for reactive stream processing. The session gives a short introduction to Apache Kafka and WildFly Swarm. You will learn about integration between WildFly Swarm's Microprofile fraction and Apache Kafka, mixing both Java EE standard APIs as well as Kafka Client APIs. The session is supported by a demo, showing processing of mobile application data for metric analysis. The session ends with an outlook how to run the different parts on Docker and Kubernetes, as well as bringing in other technologies for consuming Kafka messages, such as Vert.x.",
      "tags": [
        "Reactive",
        "MicroProfile",
        "Kafka",
        "Microservices",
        "Docker",
        "Kubernetes"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC4-SE3",
      "speakers": [
        "mwessendorf"
      ]
    },
    {
      "type": "talk",
      "title": "Cloud Native Java with Kubernetes",
      "abstract": "We all want to craft Cloud Native Java applications that are modern, scalable and resilient. We're all aware by now that we need centralized configuration, log aggregation, monitoring, healthchecking, circuit breakers, tracing, service discovery, and more! What if instead of having to code all of this we could have all of these features provided to our system in a non-intrusive way? Without having to rearchitect everything all over again? Come and join us on this session when we'll show you how to leverage your new Spring Boot application (or even your Java EE one) with the Kubernetes Platform. We'll convince you that you don't need to manage many different services by yourself to have a true Cloud Native application. You can rely on Kubernetes services to solve most of the problems. For the rest of them you can use alternatives like sidecar containers to offer added-value functionality without having to add even a single @Annotation!",
      "tags": [
        "Java EE",
        "Spring Boot",
        "Kubernetes",
        "Cloud Native",
        "Microservices"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC1-SE5",
      "speakers": [
        "edsonyanaga"
      ]
    },
    {
      "type": "talk",
      "title": "Designing Cloud Native Applications with Kubernetes",
      "abstract": "The way we design, develop and run applications on Cloud Native platforms differs significantly from traditional applications. When working with Kubernetes, there are fewer concerns for developers to think about, but at the same time, there are new patterns and practices for solving every-day challenges. In this talk, we will look at on a number of common practices and patterns for developing Cloud Native applications. More specifically we will look at the following patterns: Application Descriptor, Observable Interior, Life Cycle Conformance, Service Discovery and Load Balancing, Self Service Environments, Dynamic Placement, Declarative Deployment.",
      "tags": [
        "Cloud",
        "Kubernetes",
        "architecture",
        "Design",
        "Docker",
        "Patterns"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC2-SE3",
      "speakers": [
        "bibryam"
      ]
    },
    {
      "type": "talk",
      "title": "Machine learning by example",
      "abstract": "Are the machines learning on their own? Wait, is Skynet already here? During this session we will tackle an easy Machine Learning problem, show how can it be processed on Spark including data cleaning, normalization and a learning process. Live coding session, but only if the machines don’t rise against us.",
      "tags": [
        "Machine learning",
        "Spark"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#MON-TC4-SE4",
      "speakers": [
        "mmatloka"
      ]
    },
    {
      "type": "talk",
      "title": "The reactive landscape",
      "abstract": "Reactive Programming, Reactive eXtensions, Reactive Streams, Reactive Systems, Reactive Manifesto, that’s a lot of 'reactive' thingies. Just to make it even more confusing, 'reactive' is often associated with asynchronous, scalability, RX libraries (RX Java, RX JS), back pressure, streams, observables, futures, promises, spreadsheets and so on…. That's a lot to digest… This session helps you understanding what's behind the 'reactive' word. It explores the reactive landscape and explains what all these 'things' are and how they are related. Attendees don't only learn what does 'reactive' mean, but also how it is related to their projects and applications. By providing a global overview of the reactive landscape, this session also provides to the attendees a general understanding of the 'reactive' trend, and why it matters. The presentation uses several live coding demos to explain the different concepts. It uses Eclipse Vert.x as a playground to explain how all these concepts work together. Eclipse Vert.x is a toolkit to build reactive and distributed systems on the JVM. It supports a set of languages such as Java, JavaScript, Ceylon, Scala and Kotlin… but also a set of programming styles (callbacks, futures, streams, RX...). It covers a large part of the reactive spectrum making it a great choice to implement reactive applications and systems.",
      "tags": [
        "Reactive",
        "Vert.x"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#MON-TC2-SE6",
      "speakers": [
        "cescoffier"
      ]
    },
    {
      "type": "talk",
      "title": "Build a Q&A bot with Deeplearning4J",
      "abstract": "Chatbots are here, you don't longer necessarily talk to a human when you contact your local insurance agency. Whether that's a good thing remains to be seen, but it sure is interesting for us as developers. In this talk I will show you how you can build a basic chatbot that is capable of answering questions. I will show you how you can use DeepLearning4J to build a neural network and how the neural network can be trained with a FAQ from your company. This talk is aimed at developers who have heard of neural networks, but don't want to get involved in all the math behind it. This is a not so scientific introduction into the wonderful world of chatbots and AI.",
      "tags": [
        "Chatbot",
        "Deeplearning4J"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC3-SE1",
      "speakers": [
        "wmeints"
      ]
    },
    {
      "type": "talk",
      "title": "Java 8: the good, the bad and the ugly",
      "abstract": "Java 8 has been there for a while but still not everybody is using it. It brought us some 'life changing' new code constructions. Now it is time to look back and evaluate wat java 8 brought us in practice. With great syntax possibilities you can still write utterly ugly code.What is a good way to use Java 8 syntax? How functional is Java 8 really and is Optional the life saver some people promised it to be?",
      "tags": [
        "Java 8",
        "clean code"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC3-SE4",
      "speakers": [
        "bvermeer"
      ]
    },
    {
      "type": "talk",
      "title": "The DevOps 2.1 Toolkit: Continuously Deploying Microservices To a Swarm Cluster",
      "abstract": "DevOps is as much a cultural as technological change. While it united diverse teams and professionals and thought us how to automate all repetitive steps in our processes, it failed to introduce a real difference in the software landscape we use. Hence, DevOps 2.0 emerged with a drastic change in our methods, tools, and architecture. Finally, we have everything we need to build scalable, fault-tolerant, and self-healing systems delivered to production through continuous deployment. This talk focuses on architectural changes and new tools we should adopt to be able to tackle the problems presented by a demand for modern, responsive, fault tolerant, and elastic systems. It is based on the material published in The DevOps 2.0 Toolkit: Automating the Continuous Deployment Pipeline with Containerized Microservices book.",
      "tags": [
        "DevOps",
        "Docker",
        "Containers",
        "CD",
        "Service Discovery",
        "cluster",
        "schedulers"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC3-SE6",
      "speakers": [
        "vfarcic"
      ]
    },
    {
      "type": "talk",
      "title": "Spring Cloud Kubernetes",
      "abstract": "Spring Cloud Kubernetes is an opensource project which provides Spring Cloud integration with Kubernetes. This presentation is going to be a live coding tour through all of the Spring Cloud Kubernetes features:<br/><ul style='text-align:left'><li>Service Discovery</li><li>Client side Load Balancing</li><li>Circuit Breakers</li><li>Tracing</li></ul><p class='abstract'>The presentation aims at both Spring developers that interested in making the move to Kubernetes and for Kubernetes users that are in need of a framework that can help them glue everything together and ease the burden of microservices.</p>",
      "tags": [
        "spring",
        "cloud",
        "kubernetes"
      ],
      "level": "Advanced",
      "video": "",
      "scheduleId": "#TUE-TC2-SE5",
      "speakers": [
        "icanellos"
      ]
    },
    {
      "type": "talk",
      "title": "Java + JCP + Adopt-a-JSR + You",
      "abstract": "Learn how to take part in Java technology evolution through the Java Community Process (JCP) program. You can participate as an individual, corporation, or nonprofit such as a Java user group (JUG). This session outlines why and how to participate in the JCP Program. You will also learn about the global Adoption programs and how you can participate in the programs. We will discuss details such as how to run hack days, collaborate with other JUG leads on Adopt-a-JSR activities, and review use cases from other JUGs around the world contributing to the Java EE 7 and Java SE 8 JSRs. Currently there are new JSRs being submitted and developed for the Java EE 8 and Java SE 9 platforms. Find out how you have contribute to the future editions of the Java Standard and Java Enterprise Editions.",
      "tags": [
        "java",
        "community",
        "opensource"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#MON-TC1-SE7",
      "speakers": [
        "hvancura"
      ]
    },
    {
      "type": "talk",
      "title": "Services Assemble! Apply MVP Principles to Create Cutting-Edge Microservices Without Chaos with Spring Cloud/Netflix OSS",
      "abstract": "In this session, learn how to use proven patterns & open source software to rapidly build a robust portfolio of microservices that provide a solid foundation for your dynamic and growing microservice architecture. This session addresses vital points such as: <br/><ul><li>Configuration services</li><li>Microservice registration and discovery</li><li>Circuit breakers for graceful degradation</li><li>Load balancing and intelligent routing</li><li>Asynchronous messaging</li></ul><p class='abstract'>Additional topics discussed include logging & tracing, testing approaches, and migration patterns. The presenter will demonstrate how to develop & effectively manage microservices using OSS tools employed by Netflix to keep movies streaming globally 24x7.</p>",
      "tags": [
        "Microservices",
        "Spring",
        "Spring Boot",
        "Netflix",
        "Zuul",
        "Devices",
        "asynchronous",
        "live code"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#TUE-TC1-SE4",
      "speakers": [
        "mheckler"
      ]
    },
    {
      "type": "talk",
      "title": "Java Libraries You Can’t Afford to Miss",
      "abstract": "The Java language has passed its 20th anniversary, and with it comes an incredible range of tools libraries to choose from; sometimes there are actually too many choices for the same task. This presentation covers those libraries that have risen to the top, having proved themselves to be worthy of a place in every developer’s toolbox, for both production and testing code. It also discusses some fairly new libraries that are bound to make a big impact in the ecosystem.",
      "tags": [
        "Java",
        "opensource",
        "libraries"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC1-SE2",
      "speakers": [
        "aalmiray"
      ]
    },
    {
      "type": "talk",
      "title": "Elastic scaling with Kubernetes in a (micro)service oriented architecture",
      "abstract": "Splitting an application up into multiple independent services can be a good way to keep it scaling and ensure stability and developer productivity in larger, growing teams. But just splitting the codebase, creating APIs and deploying the code on some servers is not enough, somehow your services need to know where and how other services are accessible. Classical approaches like hardcoding everything in every service or having a central load-balancer can quickly lead to problems in terms of scalability and maintainability. In this talk I'll show how we at ResearchGate tackled this challenge. With the help of tools like Consul, linkerd and Kubernetes we created a setup that allows us to quickly boot and shutdown services. This ensures that all servers are utilized optimally and load spikes can be reacted upon quickly and automatically.",
      "tags": [
        "Kubernetes",
        "Microservices",
        "Devops"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC2-SE4",
      "speakers": [
        "bastian-hofman"
      ]
    },
    {
      "type": "talk",
      "title": "Docker Patterns",
      "abstract": "It is for sure fair to claim that Docker changed the way how we develop, ship and run applications. Although everything is set for a bright future, there are still a lot of open questions. A multitude of different Docker usage patterns has been tried out. But what will survive when the gold rush is over ? This talk presents several useful Docker patterns for Java Developers focused on the categories 'Configuration', 'Service Discovery' and 'Image Building'. You will meet commonly used patterns like 'Configuration Container, 'DNS Service Lookup', 'Dockerfile Template' or the famous 'Sidecar Pattern', but also some more esoteric recipes like the 'Wormhole' pattern. Live demos explain these patterns in detail. After the session you will have a good overview about popular and useful Docker patterns that are used in the real world. ",
      "tags": [
        "Docker",
        "Container",
        "Pattern",
        "Cloud",
        "DevOps"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC2-SE2",
      "speakers": [
        "roland-huss"
      ]
    },
    {
      "type": "talk",
      "title": "When, why and how to CQRS",
      "abstract": "Most of today’s enterprise applications base on a CRUD data model that is simple and straightforward to implement. Another concept of how to model applications is Command Query Responsibility Segregation (CQRS) that enables interesting solutions and use cases, especially with rising demands of scalability. In this session I’ll show the concept and benefits of CQRS, to which other buzzwords such as eventual consistency, event-driven architectures and event sourcing it is related and how to realize a CQRS application. The questions whether this concept can be realized with Java EE technology, where the framework already offers solutions and where it has to be extended will be answered. Most of the time will be spent live-coding and examining the 'devil is in the details' cases of both approaches.",
      "tags": [
        "java",
        "architecture",
        "microservices",
        "event sourcing",
        "event-driven"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC1-SE4",
      "speakers": [
        "sebastian-daschner"
      ]
    },
    {
      "type": "talk",
      "title": "Tame Your Data with Akka Streams and Java 8",
      "abstract": "Stream processing is a hot topic today and it’s easy to get lost among all the possibilities. In this live coding session we will explore the Reactive Streams approach used by the Akka Streams project. On an almost real-life example we’re going to walk through both the basics and some more advanced usages of the library. And if you thought Akka Streams was a Scala library, come to learn the nice Java API and see how wrong you were.",
      "tags": [
        "reactive streams",
        "akka streams",
        "stream processing",
        "java 8"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC4-SE7",
      "speakers": [
        "jacek-kunicki"
      ]
    },
    {
      "type": "talk",
      "title": "Trials & Tribulations of Java NIO2 Providers",
      "abstract": "Java NIO2 has been around since JDK7, yet we have not seen any real libraries from virtual file system support. It is totally possible to simplify service access such as classic FTP or SFTP or modern cloud services such as S3 or Dropbox using NIO2 yet does not exist. This talk will explore a very useful predecessor, Apache Commons VFS2 as well as my own Groovy VFS library. We'll then look at what is required to make real providers for virtual system using NIO2. We'll explore the various interfaces and the complexity of writing such providers. The hope is that this will be a useful substitute for the complete lack of any useful documentation of the subject and will inspire people to contribute their own providers.",
      "tags": [
        "java",
        "groovy",
        "Apache commons",
        "NIO2"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC4-SE2",
      "speakers": [
        "schalk-cronje"
      ]
    },
    {
      "type": "talk",
      "title": "MicroProfile - by Example",
      "abstract": "Architectures based on microservices introduce new challenges for architects and developers. An ever-increasing list of languages and tools brings with it the capabilities to conquer this challenge. Java is no exception. The latest addition in this area is the http://microprofile.io initiative. In this session, we will explore different approaches to building microservices using the Java ecosystem and compare them to using Microprofile.io. Strategies for building microservices with Java that are presented will be compared and demoed in live coding demos. The demos will include technologies such as Java, Java EE, microprofile.io, Docker and more.",
      "tags": [
        "JavaEE",
        "MicroProfile",
        "Microservices"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC1-SE6",
      "speakers": [
        "ivar-grimstad"
      ]
    },
    {
      "type": "talk",
      "title": "Mission to Mars: Exploring new worlds with AWS IoT",
      "abstract": "Would you like to explore new worlds with your connected devices? In this presentation we will build a simple robot and connect to it remotely, receiving data and sending instructions over the internet. Just like the Pathfinder spacecraft and its Sojourner Mars rover, our little robot will boldly travel into uncharted territory. In a live demo, our robot will explore the session room and transmit all kinds of sensor data. We will visualise that data in a web UI. With the Mars robot use case, we explore the capabilities of the Amazon IoT platform. AWS IoT comes with easy to use APIs and arranges secure communication with our robot. It also provides neat features like a rules engine and ‘device shadow’. Even when our robot is offline, device shadow makes it very easy to retrieve its latest status. And last but not least, for small scale use, AWS IoT is free to try out. Are you curious about how to connect your devices to the cloud? Take this journey and find out if this mission will lead to new discoveries.",
      "tags": [
        "IoT",
        "Robot"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#TUE-TC2-SE6",
      "speakers": [
        "jeroen-resoort"
      ]
    },
    {
      "type": "talk",
      "title": "Applying stability patterns: a case study",
      "abstract": "We all know how painful is to be paged at 3 am because the site is not responding. Netflix has made popular the Circuit Breaker pattern, but that is just one of the stability patterns of Michael Nygard's 'Release it!' book. On this presentation, you will learn each of the stability patterns found in the 'Release it!' book and we will look at practical examples of how they were applied while building a Java based system that integrates and mash up information from more than twenty different sources, some of them quite unreliable.",
      "tags": [
        "StabilityPatterns"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC3-SE4",
      "speakers": [
        "daniel-lebrero"
      ]
    },
    {
      "type": "workshop",
      "title": "Fully-automated CI stack to improve time-to-market using Docker and friends",
      "abstract": "Developers nowadays are very comfortable with software life cycle management and ceremonies around agile methodologies but the reality is that every time we need to setup a CI environment from scratch there is always struggling and suffering involved. Also the resulting environment due to its moving parts requires to have a solid mechanism to trace logs and metrics as liaising with sysadmins is out of the equation. We propose a solution that aims at minimising the time-to-market by providing an ecosystem that is able to help developers and QA's to deliver fast and quality code focusing on coding itself and not in the infrastructure or the setting up of the environment required. In this workshop we'll introduce how at atSistemas we tackle this problem by providing a fully-automated open-sourced CI stack where containers are first-class citizens. In the session we´ll talk about docker, Gitlab, Jenkins, SonarQube, Nexus, Selenium, Kubernetes, Graylog and Prometheus among others. We'll also cover and apply some common quality standards in the building stages, run all sort of tests, promote images, orchestrate deployments and monitoring logs and metrics.<br/><br/><span style=\"text-decoration: underline;\">Requirements for the workshop</span>: <a href=\"https://github.com/atSistemas/workshop-jbcn-2017\" style=\"text-decoration: underline; color: blue;\" target=\"_blank\">Follow this link</a>",
      "tags": [
        "Docker",
        "Continuous Integration"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#WED-TC1-SE1",
      "speakers": [
        "carlos-cornejo"
      ]
    },
    {
      "type": "talk",
      "title": "Monitor Your Containers",
      "abstract": "Containers are quickly gaining popularity as the preferred tool for deploying and running services. While being easier to deploy and isolate, containerized applications are creating new challenges for the logging and monitoring systems. This talk looks into the details about how the Elastic Stack, and in particular Beats — lightweight shippers — are gathering data from containers. The session shows our way to: fetch logs from containers, collect different measurements from cgroups, collect metrics using the Docker API, enhance the data with the metadata of the containers, monitor the network traffic exchanged between containers, collect metrics from the underlying host. We conclude the talk with a live demo of all the components in action.",
      "tags": [
        "Docker",
        "Elastic",
        "Beats",
        "Monitoring"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC2-SE5",
      "speakers": [
        "philipp-krenn"
      ]
    },
    {
      "type": "talk",
      "title": "Keep calm and watch Kibana: proactive approach to software development",
      "abstract": "Imagine yourself building a highly-available and performant multi-tenant cloud system used by thousands of users. Your responsibility as an engineer or product manager in your company is to deliver value to your customers by cohesive and performant solutions.<br/>Have you ever asked yourself any of the following questions?<br/> - How do I know that my team is delivering what our customers want? <br/> - How much intuition do I use to develop requirements and solutions?<br/> - How do I ensure that our solutions are performant and scalable in all situations?<br/> - Am I sure that users are using our features with the frequency that we expected?<br/>The common approach in software development is to adopt a reactive attitude towards the previous points: deliver the functionality to production, wait for customer feedback (if any) and just wait for issues and bugs to be raised by the customer. No bugs? No customer feedback? Everything is ok!<br/>Unfortunately, the reactive approach is not scalable in an enterprise environment and will not help your team much to deliver valuable solutions to your customers.In the new cloud computing era, we have a great opportunity to change our mindset and move to a proactive approach where software development teams can immediately know what's going on in production and design new functionality based on customer's behavior and data. No more intuition-driven designs!<br/>In this session, we will explore how feature instrumentation through ElasticSearch and Kibana can help cloud enterprises to change to a proactive approach: anticipate problems, get real insights about feature usage and empower their teams to own their features even after they are released to production. We will also explore how ElasticSearch can be used by multiple teams with the least friction possible and how to incorporate instrumentation as another milestone in the software development lifecycle just like requirements gathering or testing.Just think about it, keep calm and watch Kibana ;)",
      "tags": [
        "Kibana",
        "ElasticSearch",
        "Instrumentation",
        "Cloud"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC4-SE5",
      "speakers": [
        "albert-margarit"
      ]
    },
    {
      "type": "talk",
      "title": "Writing tests is fun with Spock",
      "abstract": "Spock is a test framework with built-in mocking and stubbing facilities. We can use Spock to write test code for testing Java and Groovy code. Spock tests are called specifications and we write specifications with a Groovy DSL. The DSL enforces a certain way to define the specifications, which results in better readable and maintainable test code. First we learn about the DSL Spock uses. We can write for example test methods and simply use a sentence as a method name. Also we use labels to define fixed sections each test needs. Spock support data driven testing, where we can invoke a method under test multiple times and each time with a different value. We can define the data in data providers, like lists or database rows and with data tables. To write a mock or stub we don’t need an external library. Spock has support built-in and with a very concise syntax. We learn about this syntax and see how clean our test code will be.",
      "tags": [
        "Spock",
        "Tests",
        "Groovy"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#TUE-TC2-SE4",
      "speakers": [
        "hubert-klein-ikkink"
      ]
    },
    {
      "type": "talk",
      "title": "Functional Programming Explained to my grandma",
      "abstract": "Functional programming reminds you of some old school memories... Monad scares you and you think High Order Function are rude words. However you love lambdas and you feel immutability is a great thing. I will introduce you to core principles of functionnal programming without complexity and you will be able to apply them straight away. No installation required: just internet, a basic knowledge of your favourite language and a web browser.",
      "tags": [
        "Scala",
        "Functional Programming"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#TUE-TC4-SE4",
      "speakers": [
        "charlotte-cavalier"
      ]
    },
    {
      "type": "talk",
      "title": "Clean Lambdas",
      "abstract": "Everybody's using Java8 Lambdas and Streams nowadays, right? So then, why shouldn't you use them in developing your enterprise application? It's absurd to keep away from these exponents, but at some point you may start having some weird feeling about them. And then you get to your first code review, and you start wondering... How do the 'Clean Code' principles change, when you jump on Lambdas? How should you use Lambdas while keeping a clean maintainable codebase - the ultimate goal of any java enterprise application.<br/> We'll remember how a clean function should look like, as stated in the Clean Code 'bible' by Uncle Bob, and then we'll see how these principles change when you throw Lambdas in. We'll try to figure out together some guidelines you should you keep in mind when playing with fire (oups,sorry.. Lambdas) in your enterprise application code.<br/> Then, we'll walk together through some Lambdas code samples, from the most trivial to the more mind-stretching, following an order inferred from a little study I'm running. This way, you'll see that the adoption of Lambdas and Streams can become a gradual process, that would allow your developers to master the functional thinking bit-by-bit.<br/> The talk will leave you with a lot of take-aways: hints, tips, warnings, useful even if you don't have practical experience with Lambdas. Some prior experience with Java 8 Streams and Lambdas IS recommended however, to be able to follow the discussion closely.",
      "tags": [
        "Java8",
        "Lambda",
        "Streams API",
        "Clean Code",
        "Functional Programming"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC3-SE2",
      "speakers": [
        "victor-rentea"
      ]
    },
    {
      "type": "talk",
      "title": "Integrating Applications: The Reactive Way",
      "abstract": "Reactive programming is one of the top trending paradigms for building fast asynchronous applications in the microservices era. But if you dive a bit into the reactive world, you will find out that scaling from a single application to a fully fledged reactive system is hard: you need to solve complex integration problems and communicating inside a heterogeneous system is simply a headache!<br/> In this talk, we will explore how reactive applications currently address integration problems, with live coding examples based on RxJava and Vert.x. You’ll learn how the popular framework Apache Camel can be used as reactive integration layer through the new Java 9 Flow API, opening a lot of new possibilities to reactive applications.<br/> This talk will also give you insights on the future directions of the Apache Camel project with reference to reactive systems.",
      "tags": [
        "Java",
        "Integration",
        "Functional Programming",
        "Microservices",
        "Actors"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC3-SE2",
      "speakers": [
        "nicola-ferraro"
      ]
    },
    {
      "type": "workshop",
      "title": "From Monoliths to Microservices using CQRS and Event Sourcing",
      "abstract": "In a Microservices architecture state is distributed across many applications and databases. Keeping all the microservices consistent is a non trivial task and here is where CQRS and Event Sourcing really shine.<br/>In this workshop we will move from a terrible Monolith to a nice Microservices app using CQRS/ES as the  middle man.<br/>The recipe to Microservices that we will follow here will be:<br/>1. Start with an ugly Monolith.<br/>2. Add some CQRS and ES to the Monolith using Spring Streams and Apache Kafka.<br/>3. Break your CQRS Monolith into small microservices using Spring Cloud.<br/><br/><span style=\"text-decoration: underline;\">Requirements for the workshop</span>: <a href=\"https://github.com/manuel-alvarez-alvarez/microservices-workshop\" style=\"text-decoration: underline; color: blue;\" target=\"_blank\">Follow this link</a>",
      "tags": [
        "Microservices",
        "CQRS",
        "Event Sourcing",
        "Spring Cloud",
        "Spring Streams",
        "Apache Kafka",
        "Docker"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#WED-TC2-SE2",
      "speakers": [
        "manuel-alvarez"
      ]
    },
    {
      "type": "workshop",
      "title": "IoT Hackathon",
      "abstract": "I will bring a bunch of devices and give you some code to get started. We will put all that things together during the workshop. I will have Raspberry Pis, some sensors, controller, and peripheral devices that use Z-Wave for communication. You are also welcome to bring your own devices, if you have any. And don’t forget your PC. Machine Learning, cloud, data analysis, security, home automation (bingo!) – sky is the limit! Primarily for: Developers, Participant requirements: Bring your own devices, if you have any. And don’t forget your PC.<br/><br/><span style=\"text-decoration: underline;\">Requirements for the workshop</span>: <a href=\"https://mehmandarov.com/iot-prototyping-startup-kit\" style=\"text-decoration: underline; color: blue;\" target=\"_blank\">Follow this link</a>",
      "tags": [
        "IoT",
        "Hackathon",
        "Cloud"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#WED-TC3-SE1",
      "speakers": [
        "rustam-mehmandarov"
      ]
    },
    {
      "type": "workshop",
      "title": "Design a SpringBoot Application running on Kubernetes/OpenShift",
      "abstract": "The goal of this workshop is to demonstrate how easy it could be to design/develop a microservice architecture using Spring Boot technology, Kubernetes/OpenShift as Containerized & Management platform. During the workshop, you will learn how to create a Spring Boot Application composed of 3 microservices (a CD Front Store, the backend exposing and running the service & the Database store), transform it to a Kubernetes/Docker Project using the Fabric8 Technology and deploy/operate it on OpenShift.  With the help of JBoss Forge Tool, you will accelerate the creation of the project and scaffolding of the code.<br/><br/><span style=\"text-decoration: underline;\">Requirements for the workshop</span>: <a href=\"https://github.com/redhat-microservices/lab_springboot-openshift\" style=\"text-decoration: underline; color: blue;\" target=\"_blank\">Follow this link</a>",
      "tags": [
        "Microservices",
        "Kubernetes",
        "Spring Boot"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#WED-TC2-SE1",
      "speakers": [
        "charles-moulliard"
      ]
    },
    {
      "type": "talk",
      "title": "Observable Microservices",
      "abstract": "Think of this talk as a Microservices 201. You know the basic of microservices and their pros and cons, but can you successfully maintain them in production? Microservices can make your code cleaner and more decoupled but they can be a pain to maintain in production: services writing logs in different places, requests that need to be tracked through multiple endpoints, circuit breakers going off… In this talk I review these and other operational concerns and I explain how making your microservices “observable” helps you maintain a healthy production environment without driving you crazy.",
      "tags": [
        "Microservices",
        "DevOps"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC2-SE2",
      "speakers": [
        "maria-gomez"
      ]
    },
    {
      "type": "talk",
      "title": "Building a Spring Boot application: Ask the Audience!",
      "abstract": "Spring Boot makes it easy to create stand-alone Spring-based application that you can ‘just run’. It uses a ‘convention over configuration’ approach to get you up and running in no-time, while offering all Spring features that you have grown fond of in the past years. In this session this is demonstrated by live-coding a Spring Boot application that will 'just work'.<br/>But audience beware, this is not your standard ‘live-coding session’. Attendees will have a vital say in the session’s content by defining the application’s requirements. Should it be an app to track your kitchen cupboard contents or do you want a simple task planner? It's up to you! Should it use MongoDB or Couchbase? You decide! Do you want an Angular front-end with a RESTful back-end or do you prefer a classic web app with Thymeleaf templates? It's your call! Seriously.<br/>During the session you get to make these decisions by participating in an online vote. And you will discover that Spring Boot is up to the task no matter what choices you make.<br/>So what are you waiting for? Bring your own device, help shape the application that we're building and learn lots about Spring Boot in the process.<br/>This session is intended for Java software engineers with an interest in Spring Boot. Some Spring experience could come in handy, but is not strictly necessary. After this session, you will know enough to start your own Spring Boot project.",
      "tags": [
        "spring-boot",
        "java",
        "spring",
        "mongodb",
        "couchbase",
        "thymeleaf",
        "angular"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#MON-TC4-SE6",
      "speakers": [
        "hanno-embregts"
      ]
    },
    {
      "type": "talk",
      "title": "Kappa Architecture",
      "abstract": "The kappa architecture was coined by Jay Kreps in a key post that he wrote for the o'reilly radar website. Kappa Architecture is an strategic pattern design to work with data. At the talk we will see the main concepts, what's the differences with lambda architecture, why scala language is very important in all the definition and creation of the project and what's our favorite tools to implement it (kafka+spark+scala). In addition we will show a real use case with IoT (with data from cars) and how the adoption of kappa architecture improve the project. We will finish with our vision about the future with tools like google dataflow, apache beams or Scio (an scala port of apache beams).",
      "tags": [
        "kappa-architecture",
        "patterns",
        "data",
        "scala",
        "kafka",
        "spark"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC3-SE5",
      "speakers": [
        "juantomas-garcia"
      ]
    },
    {
      "type": "talk",
      "title": "Star Trek: BDD Enterprise",
      "abstract": "'To explore strange new worlds, to seek out new life and new civilisations, to boldly go where no man has gone before.' Just like the crew of the Starship Enterprise, we explore the IT universe – seeking out new solutions, new technologies, and frameworks – from which we can learn to help us work better and more efficiently. We do this to create more functional and usable software for our customers, to put a big smile on their faces, and maybe – if we do our job really well – to make them stand back and admire what we have crafted. Tomasz was lucky enough to work in BDD (Behaviour Driven Development) quite early in his career, but he also had the misfortune to see how this great idea so often tends to fail. In his presentation Tomasz wanted to show what it is like working with BDD frameworks like JBehave, Cucumber or Concordian. He proposed an effective alternative solution for BDD which is 'Spock' – a convenient, lightweight framework, based on the Groovy language.",
      "tags": [
        "bdd",
        "test",
        "spock"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC3-SE7",
      "speakers": [
        "tomasz-dubikowski"
      ]
    },
    {
      "type": "talk",
      "title": "Lightweight Java EE for Buzzword Services",
      "abstract": "Java EE is not a hype. It is a well known player since 1999 – a quite long time but Java EE is just about to come off age. 'Modern' developers create micro or nano services, they use 'state of the art' and 'lightweight' frameworks. But when is a service micro or nano? When is a framework lightweight? How does Java EE fit in this modern world of software development? In my opinion Java EE is a perfect choice for writing micro or nano services. In this talk I try to prove my statement. Live on stage I write two services with RESTful JSON APIs with only a few lines of code which communicate with each other and run the services using a local Docker cloud where you can see how these can be scaled up and down to manage fluctuating loads. Coding, building, deploying, scaling: fast and efficient!",
      "tags": [
        "microservices",
        "nanoservices",
        "JavaEE",
        "lightweight",
        "Docker",
        "REST",
        "JSON"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#MON-TC2-SE7",
      "speakers": [
        "marcus-fihlon"
      ]
    },
    {
      "type": "talk",
      "title": "Productivity Tips for Java EE and Spring Developers",
      "abstract": "In this live coding session, we’ll build a Java EE application using JBoss Forge, deploy it onto Wildfly and test it using Arquillian. All of this is possible while barely writing a line of code! We’ll also create a microservice using JBoss Swarm. If you’re more into Spring we’ll also show you how to create a Spring application from scratch, use Spring Boot and how you can rapidly develop you applications using JRebel. There will be a bunch of other tools and tips in this session, so if you want to write code like a pro, this is the session for you!",
      "tags": [
        "JavaEE",
        "testing",
        "Arquillian"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#TUE-TC1-SE3",
      "speakers": [
        "simon-maple"
      ]
    },
    {
      "type": "workshop",
      "title": "The Pragmatic Developer's Guide to Java 9 and beyond",
      "abstract": "The upcoming Java 9 release brings with it modularity, a new REPL, a new default garbage collector, HTTP 2 client, and much more. However it importantly misses out on such features as Value Types, JSON API and others. This session looks at what is in and what is out of the Java 9 release and whether the features *really* benefit a developer. We'll discuss questions like whether Java 9 will be as useful to a developer as Java 8 was? How will libraries and frameworks make use of the modularity framework? How will applications benefit, or not, from the new default garbage collector? This session cuts through the hype to outline how Java 9 will realistically affect the everyday pragmatic developer and looks forward to what we can expect in future releases.<br/><br/><span style=\"text-decoration: underline;\">Requirements for the workshop</span>: <a href=\"https://github.com/AdoptOpenJDK/jdk9-jigsaw\" style=\"text-decoration: underline; color: blue;\" target=\"_blank\">Clone this repo and follow their instructions</a>",
      "tags": [
        "Java9",
        "modularity"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#WED-TC1-SE2",
      "speakers": [
        "simon-maple"
      ]
    },
    {
      "type": "talk",
      "title": "How to Properly Blame Things for Causing Latency: An Introduction to Distributed Tracing and Zipkin",
      "abstract": "Latency analysis is the act of blaming components for causing user perceptible delay. In today's world of microservices, this can be tricky as requests can fan out across polyglot components and even data-centers. This session will overview how to debug latency problems, using call graphs created by Zipkin.",
      "tags": [
        "zipkin",
        "tracing",
        "performance"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC3-SE5",
      "speakers": [
        "adrian-cole"
      ]
    },
    {
      "type": "talk",
      "title": "Test your microservices with REST-assured",
      "abstract": "As the number of microservices in our application landscape grows, we'd better make sure they are tested really well! There are multiple approaches to testing microservices. Unit tests help, but if we want to test a microservice as a whole, we'll have to use integration testing. In this talk, I will use REST-assured, a framework using a Java DSL, to test against the REST interface of a microservice. REST-assured is a 100% java REST testing solution that integrates nicely with other tools such as JUnit. I will also show how this compares with other solutions, for example Cucumber in combination with custom glue code, and Spring integration tests.",
      "tags": [
        "test",
        "microservices",
        "restassured"
      ],
      "level": "Beginner",
      "video": "",
      "scheduleId": "#TUE-TC3-SE6",
      "speakers": [
        "michel-schudel"
      ]
    },
    {
      "type": "talk",
      "title": "Javaslang - Functional Java Done Right",
      "abstract": "Java 8’s lambdas empower us to create wonderful APIs. Javaslang lets us dive deeper into the world of functional programming by providing us with persistent data types, immutable collections, and functional control structures. The results are beautiful and do just work. During this presentation, we will recall Java8’s downsides and explore how Javaslang’s Scala-inspired features fill-in the gaps.",
      "tags": [
        "java8",
        "javaslang",
        "functional"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#MON-TC4-SE2",
      "speakers": [
        "grzegorz-piwowarek"
      ]
    },
    {
      "type": "talk",
      "title": "Reactive - land of confusion",
      "abstract": "Buzzword, buzzwords everywhere! Among them word with many meanings - reactive. Reactive systems, reactive manifesto, reactive programing, reactive streams... Do you know them all and do you know what are the difference between them? During the talk we will try to put some order in the reactive land of confusion. We will take a closer look into the most prominent reactive initiatives, how they relate to each other, what are the benefits coming from them and if this is something you should pay attention to. At the end of the talk everyone should have clear understanding of reactive landscape. Lets spread the knowledge!",
      "tags": [
        "reactive programming",
        "reactive manifesto",
        "reactive streams",
        "rxjava"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC4-SE3",
      "speakers": [
        "piotr-kafel"
      ]
    },
    {
      "type": "talk",
      "title": "The... Wonderful? World of lambdas",
      "abstract": "We, Java developers, embrace Java 8 in the hope that by mastering Lambdas and Streams, we would be gifted with a functional programming mind. And thus we walk down the yellow brick road to the wizard of lambdas. That road usually starts from the fear and terror of learning their syntax until finally getting to understand them and opening our minds to the fruitful fields of functional programming. But this road eventually reaches a final stage: the lambda abuse.<br/>Let’s get the curtain down!<br/>During our talk, we will see examples of abuse and misuse of lambdas and streams. To master the lambas art means to know when to use them and when not to not damage your brain and, most importantly, other Java developers’. Keep your code readable and maintainable, avoid becoming a lambda addict!<br/>And if nothing else you will take with you a bunch of apparently smart java 8 one-liners to show off among your friends and colleagues.",
      "tags": [
        "java8",
        "lambda",
        "abuse"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC2-SE3",
      "speakers": [
        "david-gomez",
        "esther-lozano"
      ]
    },
    {
      "type": "talk",
      "title": "Tomorrow's Model Driven Development",
      "abstract": "With microservices all over the place how do we make sure that we don't hide the core business logic deep inside our services and their interactions? How can we separate the technical details from the domain expertise? During this presentation we will be talking about how to best take advantage of DDD and how it compares and can be used in conjunction with model driven methodologies. In order to demonstrate all these concepts in action we will be showing how to use Spring Cloud with modelling tools and frameworks to create self-documenting, adaptable and context-aware applications that will run into highly-distributed environments.",
      "tags": [
        "ddd",
        "model driven",
        "spring cloud",
        "distributed",
        "knowledge engineering",
        "frameworks"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#TUE-TC4-SE5",
      "speakers": [
        "mauricio-salatino",
        "mario-romano"
      ]
    },
    {
      "type": "workshop",
      "title": "Tests Refactoring",
      "abstract": "Treat your tests as the first class citizen. You must have heard it. In this workshop I will perform some live-refactoring of a messy test that shows too many details and this way are hard to read. I will start from initial clean-up and continue towards extracting a reusable classes (fluent-builder, template) which allow us to replace the low level details with much more readable and simpler API. My goals will be to show step by step approach in refactoring to prove it’s never too late to start to improve quality of your code a little every day. We will also go through some slides about approach to refactoring - why it happens and / or why it does not.<br/><br/><span style=\"text-decoration: underline;\">Requirements for the workshop</span>: <a href=\"https://github.com/wlodekkr/tests-refactoring\" style=\"text-decoration: underline; color: blue;\" target=\"_blank\">Follow this link</a>",
      "tags": [
        "Testing",
        "Refactoring"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#WED-TC4-SE1",
      "speakers": [
        "wlodek"
      ]
    },
    {
      "type": "workshop",
      "title": "TDD in Baby Steps",
      "abstract": "Committing fast and often helps us focus on the behaviour we are implementing and allows design to incrementally emerge. It takes a lot of discipline to mae your TDD cycle (red-green-refactor) as small as possible so that you can commit often and reduce merge problems. In this workshop we will learn how to work in tiny increments. It is guaranteed to frustrate you in the beginning (as it frustrated me when I started) but you will be surprised how quickly you will get use to it and will never go back to big commits.<br/><br/><span style='text-decoration: underline;'>Requirements for the workshop</span>: bring your own laptop, your favourite IDE / Text editor and your favourite language, make sure you can start a new project and run tests, you should be familiar with TDD (or at least know how to right unit tests), have git installed (preferably on the command line). You should be familiar with the basic commands to add and commit files.",
      "tags": [
        "TDD",
        "Testing"
      ],
      "level": "Intermediate",
      "video": "",
      "scheduleId": "#WED-TC3-SE2",
      "speakers": [
        "sandro"
      ]
    },
    {
      "type": "talk",
      "title": "Clustered event-driven services",
      "abstract": "In 2010 I came across a strange, new (to me!) architecture that the LMAX team used for their Foreign Exchange system. You might have heard about the Disruptor, it came out of this project.<br/>The core of our system is a clustered service which uses the Raft consensus algorithm to reliably replicate state between the different nodes and hosts our application logic. We will take a quick look at Raft and then at the benefits of this design compared to more “mainstream” architectures. This architecture offers a clean separation of concerns between the infrastructure - which takes care of the concurrency, I/O and high availability aspects -  and the application logic. The clean architecture is a great fit for domain-driven design.<br/>If you fancy building fast, resilient services without a database you should come to this talk!",
      "tags": [
        "Architecture",
        "Event sourcing",
        "Raft",
        "Event driven"
      ],
      "level": "Advanced",
      "video": "",
      "scheduleId": "#TUE-TC4-SE6",
      "speakers": [
        "olivier-deheurles"
      ]
    },
    {
      "type": "talk",
      "title": "Pragmatist’s Guide to Functional Geekery",
      "abstract": "Basic functional concepts like immutable data, second-order functions, lambdas and function composition can already be found in the modern programmer’s toolkit. During this talk you will learn about more advanced functional concepts and how they can solve real problems. I will talk about pattern matching, algebraic data types, type classes, functional abstractions, folding and type-level programming. I will show you a practical example written using today’s Java functional constructs and build up from there. I will use only JVM-based languages to show you how they can improve the code, make it more maintainable and testable.",
      "tags": [
        "lambdas",
        "functional programming"
      ],
      "level": "Advanced",
      "video": "",
      "scheduleId": "#TUE-TC3-SE3",
      "speakers": [
        "michal-plachta"
      ]
    }
  ]
}