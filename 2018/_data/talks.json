{
  "items": [{
      "title": "The next evolution of microservices patterns with Istio Mesh",
      "abstract": "With microservices architectures, we're making more network calls and need to do more integration to get our system to work; this creates more ways for our applications to break and cause failures to propagate much faster. We need a way to call our microservices and be resilient to distributed systems failures â€” as a first-class implementation.\n\nPrevious generations of tools solving these problems were built at Twitter or Netflix but did so with application libraries. However, for each combination of platform/language/framework we use to build microservices we need to consistently solve for the following critical functions\n\n* routing / traffic shaping\n* adaptive/clientside loadbalancing\n* service discovery\n* circuit breaking\n* timeouts / retries \n* rate limiting\n* metrics/logging/tracing\n* fault injection\n\nDoing all of these things in application-layer libraries across all your languages and all your frameworks becomes incredibly complex and expensive to maintain. In this talk, I'll introduce you to Envoy Proxy and Istio.io Service Mesh, discuss how they solve these problems more elegantly by pushing these concerns down to the infrastructure layer, and show demos of how it all works. ",
      "type": "talk",
      "tags": [
        "Service Mesh",
        "Istio",
        "Kuberentes",
        "Microservices"
      ],
      "level": "middle",
      "speakers": [
        "Q2hyaXN0aWFuUG9zdGFjaHJpc3RpYW4ucG9zdGFAZ21haWwuY29t"
      ]
    },
    {
      "title": " Don't hack the platform? ",
      "abstract": "\n\nDon't go to this talk! Your coworkers will not be happy when you come back to work tomorrow and start applying the things you'll learn here. You'll do a lot of damage.\n\nMutating immutable objects is never a good idea. You shouldn't be bypassing the constructor when you instantiate an object. You certainly don't need to add constants to your enums at runtime. And don't even think about including Java 8 code in your Java 7 codebase. Truly, nothing good will come from attending this talk.\n",
      "type": "talk",
      "tags": [
        "java",
        "reflection",
        "hacking"
      ],
      "level": "middle",
      "speakers": [
        "SmFuT3V3ZW5zamFuLm91d2Vuc0BnbWFpbC5jb20="
      ]
    },
    {
      "title": "Kotlin EE: Boost your Productivity",
      "abstract": "Kotlin is a language for the JVM, invented by JetBrains a few years ago. But what the hell is Kotlin EE? If you never heard of Kotlin EE, don't panic, it does not exist. But you can use it right away and boost your productivity!\n\nI invented the term Kotlin EE as a synonym for using the Kotlin language together with the Java EE API to create services of any size (microservices, nanoservices etc.) with just a few lines of code and the ability to focus on the business logic.\n\nKotlin and Java EE are a perfect couple for writing micro- or nanoservices. Kotlin is a very pragmatic language, builds on many concepts and techniques from Java, designed for developer productivity. Kotlin works great with all existing Java libraries and frameworks and runs with the same level of performance as Java.\n\nThe Java EE API allows us to code against a proven and stable API. Provided libraries like JAX-RS for writing RESTful APIs and Jackson for JSON (de)serializing decrease the need for additional third-party libraries which results in a short build time and a small artifact size. Benefit from a very fast build and test feedback and stay focused on your code.\n\nIn this talk, I try to prove my statements from above. Live on stage I write a service in Kotlin with a RESTful JSON API with only a few lines of code and run the service using a local Docker cloud where you can see how these can be scaled up and down to manage fluctuating loads. Coding, building, testing, deploying, scaling: fast and efficient!",
      "type": "talk",
      "tags": [
        "Kotlin",
        "Java EE",
        "Jakarta EE",
        "Docker",
        "Container",
        "Cloud"
      ],
      "level": "beginner",
      "speakers": [
        "TWFyY3VzRmlobG9ubWFyY3VzQGZpaGxvbi5jaA=="
      ]
    },
    {
      "title": " Minimum Cloud Skills or why shoving everything in containers is not enough",
      "abstract": "What do you need to know to make a successful Cloud Deployment? Is shoving everything into containers enough? Or should you make other enlightened choices? I think it's the latest so let's see what knowledge is necessary on a code/architecture level.\n\nWe will assume that deploying in the Cloud means deploying software that is distributed and that may fail at any point. Based on these two assumptions we will go over three main points: Data, Failure and Automation.\n\nAt the end of this talk you will have a good idea of all the questions you will ask yourself when deploying software on the cloud and the different possible answers. Our goal is not to go in depth in all these concepts. It's to give you a broad overview so you know what to look for when a problem or question arise.",
      "type": "talk",
      "tags": [
        "cloud",
        "best practices",
        "data",
        "automation",
        "failure"
      ],
      "level": "beginner",
      "speakers": [
        "TGF1cmVudERvZ3VpbmxhdXJlbnQuZG9ndWluQGNsZXZlci1jbG91ZC5jb20="
      ]
    },
    {
      "title": "Serverless in Deep",
      "abstract": "Maybe You have been listening about Serverless. But, do you really know what is Serverless? If you don't have any knowledge, or want to delve into the subject, this is the talk for you. We will discuss what is Serverless, its principles, how it relates to FaaS (Functions as a Service), its benefits and drawbacks. But the most import its architecture in deep, the most relevant use cases or Design Patterns, which technologies and tools we have in the market for implement Serverless, and how they come to relate the Serverless with containers.\n",
      "type": "talk",
      "tags": [
        "Serverless",
        "Kubernets",
        "Cloud",
        "FaaS"
      ],
      "level": "beginner",
      "speakers": [
        "TWVyY2VkZXNXeXNzbWVyY2VkZXMud3lzc0Bwb3dlcnd0ZWNobm9sb2d5LmNvbQ=="
      ]
    },
    {
      "title": "Ten common mistake made in Functional Java",
      "abstract": "In Java 8 functional style programming was introduced in Java. Java 9 extended this with some nice new features. For many people it is hard to grasp the idea of functional style programming after so many years of purely working in the imperative OOP style. The opportunities Java gives us out of the box are massive on the other hand with great power comes great responsibility.\n\nLet me point out common mistakes that are made when integrating functional style programming in your every day Java project and how to prevent this. This way you can make better, cleaner and more readable code. But even more important, you will be able to utilize the functional code constructions in Java 9 to it's full potential â€¦.. and maybe, you even start to like it.",
      "type": "talk",
      "tags": [
        "Functional Programming",
        "Java"
      ],
      "level": "middle",
      "speakers": [
        "QnJpYW5WZXJtZWVyYnJpYW5AYnJpYW52ZXJtZWVyLm5s"
      ]
    },
    {
      "title": "3 common pitfalls in microservice integration and how to avoid them",
      "abstract": "Integrating microservices and taming distributed systems is hard. In this talk I will present three challenges we observed in real-life projects and discuss how to avoid them.\n\n1. Communication is complex. With everything being distributed failures are normal so you need sophisticated failure handling strategies (e.g. stateful retry).\n2. Asynchronicity requires you to handle timeouts. This is not only about milliseconds, systems get much more resilient when you can wait for minutes, hours or even longer.\n3. Distributed transactions cannot simply be delegated to protocols like XA. So you need to solve the requirement to retain consistency in case of failures.\n\nI will not only use slides but also demonstrate concrete source code examples available on GitHub.",
      "type": "talk",
      "tags": [
        "Distributed Systems",
        "Microservices",
        "Integration",
        "Consistency"
      ],
      "level": "beginner",
      "speakers": [
        "QmVybmRSdWVja2VyYmVybmQucnVlY2tlckBjYW11bmRhLmNvbQ=="
      ]
    },
    {
      "title": "Escaping Developer Nightmares",
      "abstract": "Have you ever worked on a legacy project, like lots of source code, but no unit tests? Or no continuous delivery? Static code analysis completely missing, or even a simple code standard totally absent?\n\nProjects like these are still more often the case than we like to think. In fact, maybe you are a developer stuck in such a project, even though you have tried to raise these issues as problems? Were you told that is gold-plating, or simply too much work to fix?\n\nI would like to share my experiences from a couple of such projects, both from the perspective of a tech lead in a project like this, and as a software reviewer (i.e. doing software auditing). But most important: I would like to help you with some good arguments, to convince your project leader why these things matter.",
      "type": "talk",
      "tags": [
        "java",
        "continuous delivery",
        "best practices"
      ],
      "level": "beginner",
      "speakers": [
        "UnVzdGFtTWVobWFuZGFyb3ZtZWhtYW5kYXJvdkBnbWFpbC5jb20="
      ]
    },
    {
      "title": "Let's build a blockchain in 50 minutes!",
      "abstract": "Blockchain technology is hot! But how does it actually work? I always found that the best way to get familiar with new technology is to build something with it. \n\nSo, let's build a blockchain, then!\n\nIn this live coding session, I will build a blockchain from scratch, using Java 8 with a little SpringBoot sprinkled over it. The talk will include all concepts of a blockchain, like transactions, blocks, immutability, proof-of-work, and consensus in the network. After this session you will have a better understanding of how blockchains work and how to implement them!",
      "type": "talk",
      "tags": [
        "BlockChain",
        "Java",
        "Spring Boot"
      ],
      "level": "middle",
      "speakers": [
        "TWljaGVsU2NodWRlbG1pY2hlbC5zY2h1ZGVsQGdtYWlsLmNvbQ=="
      ]
    },
    {
      "title": "Distributed System explained (with Java Microservices)",
      "abstract": "Since I've been working on distributed systems I always wanted to go back in time and teach myself what I know now, in order to avoid the silly mistakes I did. Things like vector clocks, the CAP theorem, how replication really works and why it's needed! This is the speech I'd needed when I wrote my first distributed system, and it's something you need to know if you fancy working in this area. In this talk you will understand these concepts using simple Java microservices talking to each other, using the three different architectures proposed by the CAP theorem. After a quick introduction to the theory, we will start looking at the code and running demos. Services will fall, the network will be partitioned... what will the winner architecture be?",
      "type": "talk",
      "tags": [
        "Java",
        "Distributed Systems",
        "CAP",
        "code",
        "demos"
      ],
      "level": "beginner",
      "speakers": [
        "QnJ1bm9Cb3Nzb2xhYmJvc3NvbGFAZ21haWwuY29t",
        "TWFyaW9Sb21hbm9tYXJpby5yb21hbm84M0BnbWFpbC5jb20="
      ]
    },
    {
      "title": "Top 10 Vulnerabilities you wish your Java app didn't have!",
      "abstract": "This session takes some of the most common vulnerabilities found in the Java eco-system, breaks them down and shows how simple code can exploit them. We'll look at examples in the wild that have been exposed, some more famously than others, before showing you how to guard against these important security issues.",
      "type": "talk",
      "tags": [
        "java",
        "security"
      ],
      "level": "middle",
      "speakers": [
        "U2ltb25NYXBsZXNqbWFwbGVAZ21haWwuY29t"
      ]
    },
    {
      "title": "Thinking in Functional Style 'Solving Commonly Recurring Code Problems using Java's Functional Capabilities.'",
      "abstract": "In this workshop the attendees will take six different problems, explore solution to them using the functional capabilities in the Java language. The presenter will, along the way, assist the participants, and also discuss the solutions. The objective of this workshop is to motivate developers to think more functionally, reduce code complexity, and to make better use of more recent features in the language. Attendees are expected to have Java 9 installed on their machine along with their favorite IDEs.",
      "type": "workshop",
      "tags": [
        "functional",
        "java9"
      ],
      "level": "middle",
      "speakers": [
        "VmVua2F0U3VicmFtYW5pYW12ZW5rYXRzQGFnaWxlZGV2ZWxvcGVyLmNvbQ=="
      ]
    },
    {
      "title": "Kotlin for Java Programmers",
      "abstract": "Kotlin is that dark horse of JVM languages. It has gained prominence in the recent times for various good reasons. But, what does Kotlin really mean to Java programmers? In this presentation we will explore the language, learn about its key strengths and capabilities, take a peek under the hood to what it's capabilities mean on the Java eco system, and how and where we can benefit from it.",
      "type": "talk",
      "tags": [
        "Java",
        "Kotlin"
      ],
      "level": "talk",
      "speakers": [
        "VmVua2F0U3VicmFtYW5pYW12ZW5rYXRzQGFnaWxlZGV2ZWxvcGVyLmNvbQ=="
      ]
    },
    {
      "title": "Begin Event Sourcing with Lagom",
      "abstract": "Relational databases are great! They are well proven powerhouses in persisting state, but are they always the best solution to your problems?\n\nJoin me as we explore a more functional approach to how we deal with state in our systems. We'll start by covering the basis of EventSourcing and continue to take a hands-on look on the Lagom framework and Akka. You will hopefully leave with a stepping stone to start to implement EventSourced systems on the JVM",
      "type": "talk",
      "tags": [
        "Java",
        "Event Sourcing",
        "Functional Programming",
        "Akka",
        "Lagom"
      ],
      "level": "middle",
      "speakers": [
        "T2xhUGV0ZXJzc29ubWFpbEBvbGFwZXRlcnNzb24uc2U="
      ]
    },
    {
      "title": "How to Leverage the Apache Kafka Ecosystem to Productionize Machine Learning",
      "abstract": "This talk shows how to productionize Machine Learning models in mission-critical and scalable real time applications by leveraging Apache Kafka as streaming platform. The talk discusses the relation between Machine Learning frameworks such as TensorFlow, DeepLearning4J or H2O and the Apache Kafka ecosystem. A live demo shows how to build a mission-critical Machine Learning environment leveraging different Kafka components: Kafka messaging and Kafka Connect for data movement from and into different sources and sinks, Kafka Streams for model deployment and inference in real time, and KSQL for real time analytics of predictions, alerts and model accuracy.",
      "type": "talk",
      "tags": [
        "Apache Kafka",
        "Open Source"
      ],
      "level": "middle",
      "speakers": [
        "S2FpV2FlaG5lcm1lZ2FjaHVja3lAZ21haWwuY29t"
      ]
    },
    {
      "title": "A Craftsman’s Guide to Designing a Clean Architecture",
      "abstract": "In 2018, it seems like Microservices are the de facto standard for a system architecture, but do they really live up to the hype?\n\nThe talk will show you an alternative approach, how we can tame complexity with the help of a clean, monolithic architecture that is modular to the core.\nBack in 1972, David Parnas coined the most important fundamental concept in object-oriented design: modularity. Java is deliberately built from the ground up on a modular basis: Methods, classes, packages. Additionally, the module system was introduced in Java 9. Modularity is based on three pillars: high cohesion, low coupling and strong encapsulation. We will look at these three basic concepts in detail – what are they, how are they related to one another and how can we apply them on all levels of our architecture?\nThe talk will show you how you can apply these basic concepts to develop a clean, monolithic architecture at scale, based on Java 9 modules and the hexagonal architecture pattern.\nFinally, we will critically discuss microservices. We'll look at what microservices are, as well as at their advantages and disadvantages. We'll examine the technical and organizational requirements necessary for implementing a microservice architecture. Additionally, we'll explore when we should and shouldn't make use of microservices. Finally, we'll learn how to achieve a clean microservice architecture.\n",
      "type": "talk",
      "tags": [
        "Java",
        "Java 9",
        "Clean Code",
        "Architecture",
        "Modularity",
        "Microservices",
        "Hexagonal Architecture",
        "Cohesion",
        "Coupling"
      ],
      "level": "advanced",
      "speakers": [
        "TWFyY3VzQmllbG1hcmN1c0BjbGVhbmNvZGVhY2FkZW15LmNvbQ=="
      ]
    },
    {
      "title": "Long Live and Prosper to Monolith",
      "abstract": "Nowadays everyone is talking about microservices and how cool they are. That's true, but not all business needs to move to microservices, you can still use monolith architecture and make it more fashion by applying some of the design/elements that you've learned from microservices architecture.\n\nCan you use circuit breaker pattern, service isolation, event-driven and non-blocking application, cloud-native approach or zero downtime deployment in monolith architecture? Is it worth? The answer is YES!!!.\n\nCome to this session to learn how to make your Java monolith applications attractive again by borrowing some of the principles of microservices architecture.",
      "type": "talk",
      "tags": [
        "java",
        "architecture",
        "monolith",
        "microservices"
      ],
      "level": "middle",
      "speakers": [
        "QWxleFNvdG9hc290b2J1QGdtYWlsLmNvbQ=="
      ]
    },
    {
      "title": "A Look Back at Enterprise Integration Patterns and Their Use into Today's Serverless Computing",
      "abstract": "Functions, and the so called serverless computing have freed deveopers from worring about infrastructure, and even upper platform layers, as well some steps in the software development lifecycle. But once you have functions deployed, how do they interact with each other? How message navigates between them? Maybe, just maybe, it's time to look back again at EIPs - Enterprise Integration Patterns, and their use in this new way of deploying code to the Cloud. This talk will cover primarily the use of one of the key EIP frameworks - Apache Camel - and top patterns applicable to Serverless Computing using Functions services by Cloud vendors as part of the demonstrations.",
      "type": "talk",
      "tags": [
        "java",
        "serverless",
        "functions",
        "integration",
        "cloud"
      ],
      "level": "beginner",
      "speakers": [
        "QnJ1bm9Cb3JnZXNicnVuby5ib3JnZXNAZ21haWwuY29t"
      ]
    },
    {
      "title": "A Case for Outside-In Design",
      "abstract": "For a few decades, one of the most common approaches to software design is to first focus on the domain model (application layer), then persistence (data layer) and finally the user interface (presentation layer). But what are the pros and cons of this approach? Are there other alternatives? Are they viable?\n\nIn this presentation Sandro will be talking about different design biases and the impact they have. He will then focus on Outside-In Design, explaining how our domain model can emerge and evolve when driven by the needs of external systems or users, avoiding speculation and wasted effort",
      "type": "talk",
      "tags": [
        "design",
        "craftsmanship"
      ],
      "level": "middle",
      "speakers": [
        "U2FuZHJvTWFuY3Vzb2luZm9AYmFyY2Vsb25hanVnLm9yZw=="
      ]
    },
    {
      "title": "Demystifying modern significant Java language features",
      "abstract": "The presentation aims to reveal how the most significant Java 9 language features work under the hood. Each topic is covered by few code examples, bytecode instructions, JMH tests and x86 assembly generated code (only in few specific cases). We try to build a top down approach and to understand what is happening at each level inside the JVM, starting with source code, followed by javac and then JIT compilation process. Main topics: - Private interface methods - String in Java 9 (Compact strings and Indify String concatenation ) - Collection factory methods - StackWalker - Contended locks in Java 9 - Segmented Code Cache - Lambdas - Streams (e.g. ForkJoin, streams characteristics) Attendees will have a clear and comprehensive understanding about all of these internals, which might make a difference in writing better and more performant code.",
      "type": "talk",
      "tags": [
        "Java",
        "Performance",
        "JIT",
        "assembly"
      ],
      "level": "advanced",
      "speakers": [
        "SW9udXRCYWxvc2luaW9udXRiYWxvc2luQHlhaG9vLmNvbQ=="
      ]
    }
  ]
}
